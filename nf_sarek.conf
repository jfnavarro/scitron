def check_max(obj) {
    try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
    } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
    }
}

params {
    outdir = 's3://scitron/results'
    cf_window = '0'
    cf_coeff = null
    cf_ploidy = '2,3'
    max_cpus = 32
    max_memory = 140.GB
    single_cpu_mem = 16.GB
    no_gatk_spark = true
    no_intervals = true
    pon = 's3://scitron/1000g_pon.hg38.vcf.gz'
    trim_fastq = true
    species = 'homo_sapiens'
    genome = 'GRCh38'
    tools = 'Strelka,Mutect2,Manta,MSIsensor,ControlFREEC,SnpEff'
    target_bed = 's3://scitron/intersect_collapsed.bed'
}

process {
    errorStrategy = 'retry'
    maxErrors = '-1'
    maxRetries = 3

    withLabel:FastQC {
       errorStrategy = 'retry'
    }
    withName:MultiQC {
       errorStrategy = 'retry'
    }
    withName:TrimGalore {
        container = 'quay.io/biocontainers/trim-galore:0.6.5--0'
        cpus = 8
        memory = {check_max((8.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:MapReads {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:BuildBWAindexes {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:ControlFREEC {
        memory = 32.GB
        cpus = 16
    }
    withName:ControlFreecViz {
        errorStrategy = 'ignore'
    }
    withName:ControlFREECSingle {
        memory = 32.GB
        cpus = 16
    }
    withName:ControlFreecVizSingle {
        errorStrategy = 'ignore'
    }
    withName:Mutect2 {
        memory = {check_max((32.GB as nextflow.util.MemoryUnit) * task.attempt)}
        cpus = 8
    }
    withName:Mutect2Single {
        memory = {check_max((32.GB as nextflow.util.MemoryUnit) * task.attempt)}
        cpus = 8
    }
    withName:BaseRecalibrator {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:Mpileup {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
        cpus = 2
    }
    withName:MergeMpileup {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
        cpus = 2
    }
    withName:MergeBamRecal {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:Vcftools {
        memory = {check_max((8.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:Snpeff {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:MarkDuplicates {
        memory = {check_max((16.GB as nextflow.util.MemoryUnit) * task.attempt)}
        cpus = 8
    }
    withName:MantaSingle {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:Manta {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:Strelka {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:StrelkaBP {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:StrelkaSingle {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:MSIsensor_scan {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:MSIsensor_msi {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    withName:MSIsensor_msiSingle {
        memory = {check_max((64.GB as nextflow.util.MemoryUnit) * task.attempt)}
    }
    
    aws {
        client {
            maxConnections = 20
            uploadMaxThreads = 4
            uploadChunkSize = 104857600
        }
        batch {
            maxTransferAttempts = 3
            maxParallelTransfers = 20
        }
    }

}
